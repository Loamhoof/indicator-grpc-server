// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indicator.proto

/*
Package indicator is a generated protocol buffer package.

It is generated from these files:
	indicator.proto

It has these top-level messages:
	Request
	Response
*/
package indicator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	LabelGuide string `protobuf:"bytes,3,opt,name=label_guide,json=labelGuide" json:"label_guide,omitempty"`
	Icon       string `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	Active     bool   `protobuf:"varint,5,opt,name=active" json:"active,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Request) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Request) GetLabelGuide() string {
	if m != nil {
		return m.LabelGuide
	}
	return ""
}

func (m *Request) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Request) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type Response struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "indicator.Request")
	proto.RegisterType((*Response)(nil), "indicator.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Shepherd service

type ShepherdClient interface {
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type shepherdClient struct {
	cc *grpc.ClientConn
}

func NewShepherdClient(cc *grpc.ClientConn) ShepherdClient {
	return &shepherdClient{cc}
}

func (c *shepherdClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/indicator.Shepherd/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shepherd service

type ShepherdServer interface {
	Update(context.Context, *Request) (*Response, error)
}

func RegisterShepherdServer(s *grpc.Server, srv ShepherdServer) {
	s.RegisterService(&_Shepherd_serviceDesc, srv)
}

func _Shepherd_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indicator.Shepherd/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).Update(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shepherd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indicator.Shepherd",
	HandlerType: (*ShepherdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Shepherd_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indicator.proto",
}

func init() { proto.RegisterFile("indicator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcd, 0x6a, 0x84, 0x30,
	0x14, 0x85, 0xeb, 0x6f, 0xf5, 0x16, 0xda, 0x72, 0x5b, 0x4a, 0x28, 0x85, 0x8a, 0x2b, 0x57, 0x2e,
	0xea, 0x03, 0x74, 0xd9, 0x7d, 0xca, 0xac, 0x87, 0x68, 0x2e, 0x63, 0x40, 0x4c, 0x26, 0xc6, 0x59,
	0xcd, 0xc3, 0x0f, 0x46, 0x99, 0x61, 0x76, 0xdf, 0xf9, 0x0e, 0x24, 0xf7, 0xc0, 0x8b, 0x1a, 0xa5,
	0xea, 0x84, 0xd3, 0xb6, 0x36, 0x56, 0x3b, 0x8d, 0xf9, 0x55, 0x94, 0x67, 0x78, 0xe4, 0x74, 0x9c,
	0x69, 0x72, 0xf8, 0x0c, 0xa1, 0x92, 0x2c, 0x28, 0x82, 0x2a, 0xe7, 0xa1, 0x92, 0xf8, 0x0e, 0xc9,
	0x20, 0x5a, 0x1a, 0x58, 0xe8, 0xd5, 0x1a, 0xf0, 0x1b, 0x9e, 0x3c, 0xec, 0x0f, 0xb3, 0x92, 0xc4,
	0x22, 0xdf, 0x81, 0x57, 0x7f, 0x8b, 0x41, 0x84, 0x58, 0x75, 0x7a, 0x64, 0xb1, 0x6f, 0x3c, 0xe3,
	0x07, 0xa4, 0xa2, 0x73, 0xea, 0x44, 0x2c, 0x29, 0x82, 0x2a, 0xe3, 0x5b, 0x2a, 0xbf, 0x20, 0xe3,
	0x34, 0x19, 0x3d, 0x4e, 0x84, 0xaf, 0x10, 0x91, 0xb5, 0xdb, 0xff, 0x0b, 0xfe, 0xfc, 0x42, 0xf6,
	0xdf, 0x93, 0xe9, 0xc9, 0x4a, 0x6c, 0x20, 0xdd, 0x19, 0x29, 0x1c, 0x21, 0xd6, 0xb7, 0x39, 0xdb,
	0xe9, 0x9f, 0x6f, 0x77, 0x6e, 0x7d, 0xb0, 0x7c, 0x68, 0x53, 0x3f, 0xb7, 0xb9, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xa5, 0x9c, 0x17, 0xd0, 0x01, 0x01, 0x00, 0x00,
}
